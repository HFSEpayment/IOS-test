// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name EpaySDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
import Accelerate
import AudioToolbox
import ContactsUI
import CoreGraphics
import CoreMedia
import CoreVideo
import DeveloperToolsSupport
@_exported import EpaySDK
import Foundation
import MobileCoreServices
import OpenGLES
import PassKit
import QuartzCore
import Security
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum EnvironmentType {
  case prod
  case preProd
  case dev
  public static func == (a: EpaySDK.EnvironmentType, b: EpaySDK.EnvironmentType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct CaretString : Swift.CustomDebugStringConvertible, Swift.CustomStringConvertible, Swift.Equatable {
  public let string: Swift.String
  public let caretPosition: Swift.String.Index
  public let caretGravity: EpaySDK.CaretString.CaretGravity
  public init(string: Swift.String, caretPosition: Swift.String.Index, caretGravity: EpaySDK.CaretString.CaretGravity)
  public var debugDescription: Swift.String {
    get
  }
  public var description: Swift.String {
    get
  }
  public enum CaretGravity : Swift.Equatable {
    case forward(autocomplete: Swift.Bool)
    case backward(autoskip: Swift.Bool)
    public static func == (a: EpaySDK.CaretString.CaretGravity, b: EpaySDK.CaretString.CaretGravity) -> Swift.Bool
  }
}
public func == (left: EpaySDK.CaretString, right: EpaySDK.CaretString) -> Swift.Bool
@available(iOS 11, *)
public protocol OnMaskedTextChangedListener : AnyObject {
  func textInput(_ textInput: any UIKit.UITextInput, didExtractValue value: Swift.String, didFillMandatoryCharacters complete: Swift.Bool, didComputeTailPlaceholder tailPlaceholder: Swift.String)
}
@objc @_inheritsConvenienceInitializers @available(iOS 11, *)
@IBDesignable open class MaskedTextInputListener : ObjectiveC.NSObject {
  weak open var listener: (any EpaySDK.OnMaskedTextChangedListener)?
  open var onMaskedTextChangedCallback: ((_ textInput: any UIKit.UITextInput, _ value: Swift.String, _ complete: Swift.Bool, _ tailPlaceholder: Swift.String) -> ())?
  weak open var textFieldDelegate: (any UIKit.UITextFieldDelegate)?
  weak open var textViewDelegate: (any UIKit.UITextViewDelegate)?
  @objc @IBInspectable open var primaryMaskFormat: Swift.String
  @objc @IBInspectable open var autocomplete: Swift.Bool
  @objc @IBInspectable open var autocompleteOnFocus: Swift.Bool
  @objc @IBInspectable open var autoskip: Swift.Bool
  @objc @IBInspectable open var rightToLeft: Swift.Bool
  @objc @IBInspectable open var allowSuggestions: Swift.Bool
  @objc @IBInspectable open var atomicCaretMovement: Swift.Bool
  open var affineFormats: [Swift.String]
  open var affinityCalculationStrategy: EpaySDK.AffinityCalculationStrategy
  open var customNotations: [EpaySDK.Notation]
  open var primaryMask: EpaySDK.Mask {
    get
  }
  public init(primaryFormat: Swift.String = "", autocomplete: Swift.Bool = true, autocompleteOnFocus: Swift.Bool = true, autoskip: Swift.Bool = false, rightToLeft: Swift.Bool = false, affineFormats: [Swift.String] = [], affinityCalculationStrategy: EpaySDK.AffinityCalculationStrategy = .wholeString, customNotations: [EpaySDK.Notation] = [], onMaskedTextChangedCallback: ((_ textInput: any UIKit.UITextInput, _ value: Swift.String, _ complete: Swift.Bool, _ tailPlaceholder: Swift.String) -> ())? = nil, allowSuggestions: Swift.Bool = true)
  @objc override dynamic public init()
  open var placeholder: Swift.String {
    get
  }
  open var acceptableTextLength: Swift.Int {
    get
  }
  open var totalTextLength: Swift.Int {
    get
  }
  open var acceptableValueLength: Swift.Int {
    get
  }
  open var totalValueLength: Swift.Int {
    get
  }
  @discardableResult
  open func put(text: Swift.String, into field: any UIKit.UITextInput, autocomplete putAutocomplete: Swift.Bool? = nil) -> EpaySDK.Mask.Result
  @discardableResult
  open func textInput(_ textInput: any UIKit.UITextInput, isChangingCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> EpaySDK.MaskedTextInputListener.Result
  open func isThisDeletion(inRange range: Foundation.NSRange, string: Swift.String, field: any UIKit.UITextInput) -> Swift.Bool
  open func replaceCharacters(inText text: Swift.String, range: Foundation.NSRange, withCharacters newText: Swift.String) -> Swift.String
  open func pickMask(forText text: EpaySDK.CaretString) -> EpaySDK.Mask
  open func notifyOnMaskedTextChangedListeners(forTextInput textInput: any UIKit.UITextInput, result: EpaySDK.Mask.Result)
  open func setCaretPosition(_ position: Swift.Int, in textInput: any UIKit.UITextInput)
  public enum Result {
    case notifyListeners(result: EpaySDK.Mask.Result)
    case fallback
  }
  @objc @IBOutlet public var delegate: ObjectiveC.NSObject? {
    @objc get
    @objc set(newDelegate)
  }
  @objc deinit
}
@available(iOS 11, *)
extension EpaySDK.MaskedTextInputListener : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic open func textFieldShouldClear(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldShouldBeginEditing(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldShouldEndEditing(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldDidEndEditing(_ textField: UIKit.UITextField, reason: UIKit.UITextField.DidEndEditingReason)
  @available(iOS 13.0, tvOS 13.0, *)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldDidChangeSelection(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
  @available(iOS 16.0, tvOS 16.0, *)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textField(_ textField: UIKit.UITextField, editMenuForCharactersIn range: Foundation.NSRange, suggestedActions: [UIKit.UIMenuElement]) -> UIKit.UIMenu?
}
@available(iOS 11, *)
extension EpaySDK.MaskedTextInputListener : UIKit.UITextViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func textViewDidBeginEditing(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func textView(_ textView: UIKit.UITextView, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textViewShouldBeginEditing(_ textView: UIKit.UITextView) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textViewShouldEndEditing(_ textView: UIKit.UITextView) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textViewDidEndEditing(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textViewDidChange(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textViewDidChangeSelection(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textView(_ textView: UIKit.UITextView, shouldInteractWith URL: Foundation.URL, in characterRange: Foundation.NSRange, interaction: UIKit.UITextItemInteraction) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textView(_ textView: UIKit.UITextView, shouldInteractWith textAttachment: UIKit.NSTextAttachment, in characterRange: Foundation.NSRange, interaction: UIKit.UITextItemInteraction) -> Swift.Bool
  @available(iOS 16.0, tvOS 16.0, *)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textView(_ textView: UIKit.UITextView, editMenuForTextIn range: Foundation.NSRange, suggestedActions: [UIKit.UIMenuElement]) -> UIKit.UIMenu?
}
public struct ErrorResponseBody : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 13.0, tvOS 13.0, *)
extension EpaySDK.MaskedTextField {
  public func textColor(_ color: UIKit.UIColor) -> EpaySDK.MaskedTextField
  public func fontFromUIFont(_ font: UIKit.UIFont) -> EpaySDK.MaskedTextField
  public func textAlignement(_ alignment: UIKit.NSTextAlignment) -> EpaySDK.MaskedTextField
  public func borderStyle(_ borderStyle: UIKit.UITextField.BorderStyle) -> EpaySDK.MaskedTextField
  public func tintColor(_ tintColor: UIKit.UIColor) -> EpaySDK.MaskedTextField
  public func clearsOnBeginEditing(_ clearsOnBeginEditing: Swift.Bool) -> EpaySDK.MaskedTextField
  public func clearsOnInsertion(_ clearsOnInsertion: Swift.Bool) -> EpaySDK.MaskedTextField
  public func adjustsFontSizeToFitWidth(_ adjustsFontSizeToFitWidth: Swift.Bool) -> EpaySDK.MaskedTextField
  public func minimumFontSize(_ minimumFontSize: CoreFoundation.CGFloat) -> EpaySDK.MaskedTextField
  public func backgroundImage(_ background: UIKit.UIImage) -> EpaySDK.MaskedTextField
  public func disabledBackgroundImage(_ disabledBackground: UIKit.UIImage) -> EpaySDK.MaskedTextField
  public func clearButtonMode(_ clearButtonMode: UIKit.UITextField.ViewMode) -> EpaySDK.MaskedTextField
  public func leftView(_ leftView: UIKit.UIView) -> EpaySDK.MaskedTextField
  public func leftViewMode(_ leftViewMode: UIKit.UITextField.ViewMode) -> EpaySDK.MaskedTextField
  public func rightView(_ rightView: UIKit.UIView) -> EpaySDK.MaskedTextField
  public func rightViewMode(_ rightViewMode: UIKit.UITextField.ViewMode) -> EpaySDK.MaskedTextField
  public func inputView(_ inputView: UIKit.UIView) -> EpaySDK.MaskedTextField
  public func inputAccessoryView(_ inputAccessoryView: UIKit.UIView) -> EpaySDK.MaskedTextField
  public func isUserInteractionEnabled(_ isUserInteractionEnabled: Swift.Bool) -> EpaySDK.MaskedTextField
  public func autocapitalizationType(_ autocapitalizationType: UIKit.UITextAutocapitalizationType) -> EpaySDK.MaskedTextField
  public func autocorrectionType(_ autocorrectionType: UIKit.UITextAutocorrectionType) -> EpaySDK.MaskedTextField
  public func spellCheckingType(_ spellCheckingType: UIKit.UITextSpellCheckingType) -> EpaySDK.MaskedTextField
  public func smartQuotesType(_ smartQuotesType: UIKit.UITextSmartQuotesType) -> EpaySDK.MaskedTextField
  public func smartDashesType(_ smartDashesType: UIKit.UITextSmartDashesType) -> EpaySDK.MaskedTextField
  public func smartInsertDeleteType(_ smartInsertDeleteType: UIKit.UITextSmartInsertDeleteType) -> EpaySDK.MaskedTextField
  public func keyboardType(_ keyboardType: UIKit.UIKeyboardType) -> EpaySDK.MaskedTextField
  public func keyboardAppearance(_ keyboardAppearance: UIKit.UIKeyboardAppearance) -> EpaySDK.MaskedTextField
  public func returnKeyType(_ returnKeyType: UIKit.UIReturnKeyType) -> EpaySDK.MaskedTextField
  public func enablesReturnKeyAutomatically(_ enablesReturnKeyAutomatically: Swift.Bool) -> EpaySDK.MaskedTextField
  public func isSecureTextEntry(_ isSecureTextEntry: Swift.Bool) -> EpaySDK.MaskedTextField
  public func textContentType(_ textContentType: UIKit.UITextContentType) -> EpaySDK.MaskedTextField
  public func passwordRules(_ passwordRules: UIKit.UITextInputPasswordRules) -> EpaySDK.MaskedTextField
  public func contentHuggingPriorityVertical(_ contentHuggingPriorityVertical: UIKit.UILayoutPriority) -> EpaySDK.MaskedTextField
  public func contentHuggingPriorityHorizontal(_ contentHuggingPriorityHorizontal: UIKit.UILayoutPriority) -> EpaySDK.MaskedTextField
  public func contentCompressionResistancePriorityHorizontal(_ contentCompressionResistancePriorityHorizontal: UIKit.UILayoutPriority) -> EpaySDK.MaskedTextField
  public func contentCompressionResistancePriorityVertical(_ contentCompressionResistancePriorityVertical: UIKit.UILayoutPriority) -> EpaySDK.MaskedTextField
  public func onSubmit(_ onSubmit: @escaping EpaySDK.MaskedTextField.UITextFieldEvent) -> EpaySDK.MaskedTextField
  public func onFocus(_ onFocus: @escaping EpaySDK.MaskedTextField.UITextFieldEvent) -> EpaySDK.MaskedTextField
  public func monospacedDigit(size: CoreFoundation.CGFloat = 16.0, weight: UIKit.UIFont.Weight = .medium) -> EpaySDK.MaskedTextField
  public func monospaced(size: CoreFoundation.CGFloat = 16.0, weight: UIKit.UIFont.Weight = .medium) -> EpaySDK.MaskedTextField
  public func fontSizeWeight(_ size: CoreFoundation.CGFloat = 16.0, _ weight: UIKit.UIFont.Weight = .medium) -> EpaySDK.MaskedTextField
  public func bold(_ size: CoreFoundation.CGFloat = 16.0) -> EpaySDK.MaskedTextField
  public func italic(_ size: CoreFoundation.CGFloat = 16.0) -> EpaySDK.MaskedTextField
}
public struct PaymentResponseBody : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct AuthConfig {
  public var merchantId: Swift.String
  public var merchantName: Swift.String
  public var clientId: Swift.String
  public var clientSecret: Swift.String
  public var isAppClip: Swift.Bool?
  public var appClipToken: Swift.String?
  public var appleMerchantId: Swift.String?
  public init(merchantId: Swift.String, merchantName: Swift.String, clientId: Swift.String, clientSecret: Swift.String, isAppClip: Swift.Bool? = false, appClipToken: Swift.String? = nil, appleMerchantId: Swift.String? = nil)
}
extension Foundation.URLRequest {
  public var curlString: Swift.String {
    get
  }
}
@available(iOS 13.0, tvOS 13.0, *)
public struct MaskedTextField : SwiftUI.UIViewRepresentable {
  public typealias UITextFieldEvent = (_ textField: UIKit.UITextField) -> Swift.Void
  @SwiftUI.Binding @_projectedValueProperty($text) public var text: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  public var $text: SwiftUI.Binding<Swift.String> {
    get
  }
  @SwiftUI.Binding @_projectedValueProperty($value) public var value: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  public var $value: SwiftUI.Binding<Swift.String> {
    get
  }
  @SwiftUI.Binding @_projectedValueProperty($complete) public var complete: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  public var $complete: SwiftUI.Binding<Swift.Bool> {
    get
  }
  public var placeholder: Swift.String
  public var textColor: UIKit.UIColor?
  public var font: UIKit.UIFont?
  public var textAlignement: UIKit.NSTextAlignment?
  public var borderStyle: UIKit.UITextField.BorderStyle?
  public var tintColor: UIKit.UIColor?
  public var clearsOnBeginEditing: Swift.Bool?
  public var clearsOnInsertion: Swift.Bool?
  public var adjustsFontSizeToFitWidth: Swift.Bool?
  public var minimumFontSize: CoreFoundation.CGFloat?
  public var background: UIKit.UIImage?
  public var disabledBackground: UIKit.UIImage?
  public var clearButtonMode: UIKit.UITextField.ViewMode?
  public var leftView: UIKit.UIView?
  public var leftViewMode: UIKit.UITextField.ViewMode?
  public var rightView: UIKit.UIView?
  public var rightViewMode: UIKit.UITextField.ViewMode?
  public var inputView: UIKit.UIView?
  public var inputAccessoryView: UIKit.UIView?
  public var isUserInteractionEnabled: Swift.Bool?
  public var autocapitalizationType: UIKit.UITextAutocapitalizationType?
  public var autocorrectionType: UIKit.UITextAutocorrectionType?
  public var spellCheckingType: UIKit.UITextSpellCheckingType?
  public var smartQuotesType: UIKit.UITextSmartQuotesType?
  public var smartDashesType: UIKit.UITextSmartDashesType?
  public var smartInsertDeleteType: UIKit.UITextSmartInsertDeleteType?
  public var keyboardType: UIKit.UIKeyboardType?
  public var keyboardAppearance: UIKit.UIKeyboardAppearance?
  public var returnKeyType: UIKit.UIReturnKeyType?
  public var enablesReturnKeyAutomatically: Swift.Bool?
  public var isSecureTextEntry: Swift.Bool?
  public var textContentType: UIKit.UITextContentType?
  public var passwordRules: UIKit.UITextInputPasswordRules?
  public var contentHuggingPriorityVertical: UIKit.UILayoutPriority
  public var contentHuggingPriorityHorizontal: UIKit.UILayoutPriority?
  public var contentCompressionResistancePriorityHorizontal: UIKit.UILayoutPriority
  public var contentCompressionResistancePriorityVertical: UIKit.UILayoutPriority?
  public var onSubmit: EpaySDK.MaskedTextField.UITextFieldEvent?
  public var onFocus: EpaySDK.MaskedTextField.UITextFieldEvent?
  public let primaryMaskFormat: Swift.String
  public let autocomplete: Swift.Bool
  public let autocompleteOnFocus: Swift.Bool
  public let autoskip: Swift.Bool
  public let rightToLeft: Swift.Bool
  public let allowSuggestions: Swift.Bool
  public let atomicCursorMovement: Swift.Bool
  public let affineFormats: [Swift.String]
  public let affinityCalculationStrategy: EpaySDK.AffinityCalculationStrategy
  public let customNotations: [EpaySDK.Notation]
  public init(text: SwiftUI.Binding<Swift.String>, value: SwiftUI.Binding<Swift.String>, complete: SwiftUI.Binding<Swift.Bool>, placeholder: Swift.String, primaryMaskFormat: Swift.String = "", autocomplete: Swift.Bool = true, autocompleteOnFocus: Swift.Bool = true, autoskip: Swift.Bool = false, rightToLeft: Swift.Bool = false, allowSuggestions: Swift.Bool = true, affineFormats: [Swift.String] = [], affinityCalculationStrategy: EpaySDK.AffinityCalculationStrategy = .wholeString, customNotations: [EpaySDK.Notation] = [])
  @_Concurrency.MainActor(unsafe) public func makeUIView(context: EpaySDK.MaskedTextField.Context) -> UIKit.UITextField
  @_Concurrency.MainActor(unsafe) public func updateUIView(_ uiView: UIKit.UITextField, context: EpaySDK.MaskedTextField.Context)
  @_Concurrency.MainActor(unsafe) public func makeCoordinator() -> EpaySDK.MaskedTextField.Coordinator
  @objc @_Concurrency.MainActor(unsafe) final public class Coordinator : EpaySDK.MaskedTextInputListener {
    @_Concurrency.MainActor(unsafe) final public var onSubmit: EpaySDK.MaskedTextField.UITextFieldEvent?
    @_Concurrency.MainActor(unsafe) final public var onFocus: EpaySDK.MaskedTextField.UITextFieldEvent?
    @_Concurrency.MainActor(unsafe) public init(primaryFormat: Swift.String = "", autocomplete: Swift.Bool = true, autocompleteOnFocus: Swift.Bool = true, autoskip: Swift.Bool = false, rightToLeft: Swift.Bool = false, affineFormats: [Swift.String] = [], affinityCalculationStrategy: EpaySDK.AffinityCalculationStrategy = .wholeString, customNotations: [EpaySDK.Notation] = [], onMaskedTextChangedCallback: ((any UIKit.UITextInput, Swift.String, Swift.Bool, Swift.String) -> ())? = nil, allowSuggestions: Swift.Bool = true, onSubmit: EpaySDK.MaskedTextField.UITextFieldEvent? = nil, onFocus: EpaySDK.MaskedTextField.UITextFieldEvent? = nil)
    @_Concurrency.MainActor(unsafe) @objc override final public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
    @_Concurrency.MainActor(unsafe) @objc override final public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
    @objc deinit
  }
  public typealias Body = Swift.Never
  public typealias UIViewType = UIKit.UITextField
}
public class Mask : Swift.CustomDebugStringConvertible, Swift.CustomStringConvertible {
  public struct Result : Swift.CustomDebugStringConvertible, Swift.CustomStringConvertible {
    public let formattedText: EpaySDK.CaretString
    public let extractedValue: Swift.String
    public let affinity: Swift.Int
    public let complete: Swift.Bool
    public let tailPlaceholder: Swift.String
    public var debugDescription: Swift.String {
      get
    }
    public var description: Swift.String {
      get
    }
  }
  required public init(format: Swift.String, customNotations: [EpaySDK.Notation] = []) throws
  public class func getOrCreate(withFormat format: Swift.String, customNotations: [EpaySDK.Notation] = []) throws -> EpaySDK.Mask
  public class func isValid(format: Swift.String, customNotations: [EpaySDK.Notation] = []) -> Swift.Bool
  public func apply(toText text: EpaySDK.CaretString) -> EpaySDK.Mask.Result
  public var placeholder: Swift.String {
    get
  }
  public var acceptableTextLength: Swift.Int {
    get
  }
  public var totalTextLength: Swift.Int {
    get
  }
  public var acceptableValueLength: Swift.Int {
    get
  }
  public var totalValueLength: Swift.Int {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
  public var description: Swift.String {
    get
  }
  @objc deinit
}
public enum AffinityCalculationStrategy {
  case wholeString
  case prefix
  case capacity
  case extractedValueCapacity
  public func calculateAffinity(ofMask mask: EpaySDK.Mask, forText text: EpaySDK.CaretString, autocomplete: Swift.Bool) -> Swift.Int
  public static func == (a: EpaySDK.AffinityCalculationStrategy, b: EpaySDK.AffinityCalculationStrategy) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct Notation {
  public init(character: Swift.Character, characterSet: Foundation.CharacterSet, isOptional: Swift.Bool)
}
public struct Invoice {
  public init(id: Swift.String, amount: Swift.Double, currency: Swift.String, accountId: Swift.String, description: Swift.String, postLink: Swift.String, failurePostLink: Swift.String, isRecurrent: Swift.Bool, autoPaymentFrequency: EpaySDK.AutoPaymentFrequency, transferType: EpaySDK.TransferType? = nil, homebankToken: Swift.String? = nil, amountEditable: Swift.Bool = false, sender: EpaySDK.CardInfo? = nil, receiver: EpaySDK.CardInfo? = nil, masterPass: EpaySDK.MasterPassData? = nil)
}
public enum AutoPaymentFrequency : Swift.String {
  case weekly
  case monthly
  case quarterly
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers public class RTLMask : EpaySDK.Mask {
  required public init(format: Swift.String, customNotations: [EpaySDK.Notation] = []) throws
  override public class func getOrCreate(withFormat format: Swift.String, customNotations: [EpaySDK.Notation] = []) throws -> EpaySDK.RTLMask
  override public func apply(toText text: EpaySDK.CaretString) -> EpaySDK.Mask.Result
  @objc deinit
}
extension Swift.String {
  public func separate(by: Swift.String) -> Swift.String
}
extension Swift.String {
  public var reversed: Swift.String {
    get
  }
  public func truncateFirst() -> Swift.String
  public func prefixIntersection(with string: Swift.String) -> Swift.Substring
  public func reversedFormat() -> Swift.String
  public func distanceFromStartIndex(to index: Swift.String.Index) -> Swift.Int
  public func startIndex(offsetBy offset: Swift.Int) -> Swift.String.Index
  public func extractDigits() -> Swift.String
  public func numberOfOccurrencesOf(_ string: Swift.String) -> Swift.Int
  public func boxSizeWithFont(_ font: UIKit.UIFont) -> CoreFoundation.CGSize
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class NumberInputListener : EpaySDK.MaskedTextInputListener {
  @_Concurrency.MainActor(unsafe) open var formatter: Foundation.NumberFormatter?
  override open var placeholder: Swift.String {
    get
  }
  override open func pickMask(forText text: EpaySDK.CaretString) -> EpaySDK.Mask
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func textFieldShouldClear(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func textViewDidBeginEditing(_ textView: UIKit.UITextView)
  override public init(primaryFormat: Swift.String = super, autocomplete: Swift.Bool = super, autocompleteOnFocus: Swift.Bool = super, autoskip: Swift.Bool = super, rightToLeft: Swift.Bool = super, affineFormats: [Swift.String] = super, affinityCalculationStrategy: EpaySDK.AffinityCalculationStrategy = super, customNotations: [EpaySDK.Notation] = super, onMaskedTextChangedCallback: ((_ textInput: any UIKit.UITextInput, _ value: Swift.String, _ complete: Swift.Bool, _ tailPlaceholder: Swift.String) -> ())? = nil, allowSuggestions: Swift.Bool = super)
  @objc override dynamic public init()
  @objc deinit
}
public struct MasterPassData {
  public init(cardData: EpaySDK.MasterPassCardData, merchantName: Swift.String, session: Swift.String, masterPassAction: EpaySDK.MasterPassAction)
}
public struct MasterPassCardData {
  public init(token: Swift.String, CardHolder: Swift.String, ExpiryDate: Swift.String, PANMask: Swift.String, CardStatus: Swift.Int)
}
public struct MasterPassAction {
  public init(SaveCard: Swift.Bool, updateSaveCard: Swift.Bool?, recurring: Swift.Bool?)
}
extension EpaySDK.MasterPassCardData {
  public var maskedCardNumber: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class SkyFloatingLabelTextField : UIKit.UITextField {
  @objc @_Concurrency.MainActor(unsafe) open var isLTRLanguage: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open var titleFadeInDuration: Swift.Double
  @objc @_Concurrency.MainActor(unsafe) dynamic open var titleFadeOutDuration: Swift.Double
  @IBInspectable @_Concurrency.MainActor(unsafe) @objc override dynamic open var textColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic open var placeholderColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open var placeholderFont: UIKit.UIFont? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open var titleFont: UIKit.UIFont {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic open var titleColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic open var lineColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic open var errorColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic open var lineErrorColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic open var textErrorColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic open var titleErrorColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic open var disabledColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic open var selectedTitleColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic open var selectedLineColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic open var lineHeight: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic open var selectedLineHeight: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var lineView: UIKit.UIView!
  @_Concurrency.MainActor(unsafe) open var titleLabel: UIKit.UILabel!
  @_Concurrency.MainActor(unsafe) open var titleFormatter: (_ text: Swift.String) -> Swift.String
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isSecureTextEntry: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var errorMessage: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var editingOrSelected: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) open var hasErrorMessage: Swift.Bool {
    get
  }
  @IBInspectable @_Concurrency.MainActor(unsafe) @objc override dynamic open var text: Swift.String? {
    @objc get
    @objc set
  }
  @IBInspectable @_Concurrency.MainActor(unsafe) @objc override dynamic open var placeholder: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var selectedTitle: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var title: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) open func editingChanged()
  @discardableResult
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func becomeFirstResponder() -> Swift.Bool
  @discardableResult
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func resignFirstResponder() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open func updateColors()
  @_Concurrency.MainActor(unsafe) open func setTitleVisible(_ titleVisible: Swift.Bool, animated: Swift.Bool = false, animationCompletion: ((_ completed: Swift.Bool) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) open func isTitleVisible() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func textRect(forBounds bounds: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func editingRect(forBounds bounds: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func placeholderRect(forBounds bounds: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @_Concurrency.MainActor(unsafe) open func titleLabelRectForBounds(_ bounds: CoreFoundation.CGRect, editing: Swift.Bool) -> CoreFoundation.CGRect
  @_Concurrency.MainActor(unsafe) open func lineViewRectForBounds(_ bounds: CoreFoundation.CGRect, editing: Swift.Bool) -> CoreFoundation.CGRect
  @_Concurrency.MainActor(unsafe) open func titleHeight() -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) open func textHeight() -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForInterfaceBuilder()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @objc deinit
}
public enum KeyboardEventType : Swift.CaseIterable {
  case willShow
  case didShow
  case willHide
  case didHide
  case willChangeFrame
  case didChangeFrame
  public var notificationName: Foundation.NSNotification.Name {
    get
  }
  public static func == (a: EpaySDK.KeyboardEventType, b: EpaySDK.KeyboardEventType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [EpaySDK.KeyboardEventType]
  public static var allCases: [EpaySDK.KeyboardEventType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct KeyboardEvent {
  public let type: EpaySDK.KeyboardEventType
  public let keyboardFrameBegin: CoreFoundation.CGRect
  public let keyboardFrameEnd: CoreFoundation.CGRect
  public let curve: UIKit.UIView.AnimationCurve
  public let duration: Foundation.TimeInterval
  public var isLocal: Swift.Bool?
  public var options: UIKit.UIView.AnimationOptions {
    get
  }
}
public enum KeyboardState {
  case initial
  case showing
  case shown
  case hiding
  case hidden
  case changing
  public static func == (a: EpaySDK.KeyboardState, b: EpaySDK.KeyboardState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public typealias KeyboardEventClosure = ((_ event: EpaySDK.KeyboardEvent) -> Swift.Void)
open class KeyboardObserver {
  open var state: EpaySDK.KeyboardState
  open var isEnabled: Swift.Bool
  @objc deinit
  public init()
  open func observe(_ event: @escaping EpaySDK.KeyboardEventClosure)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class LaunchScreenViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public init(paymentModel: EpaySDK.PaymentModel)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) public func setEnvironmetType(type: EpaySDK.EnvironmentType)
  @objc deinit
}
public enum TransferType : Swift.String, Swift.CaseIterable {
  case P2P, AFT, OCT, CardId, byPhone, masterPass
  public init?(rawValue: Swift.String)
  public typealias AllCases = [EpaySDK.TransferType]
  public typealias RawValue = Swift.String
  public static var allCases: [EpaySDK.TransferType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct PaymentResult {
  public var isSuccessful: Swift.Bool
  public var paymentReference: Swift.String?
  public var cardID: Swift.String?
  public var errorCode: Swift.Int?
  public var errorMessage: Swift.String?
}
@available(iOS 11, *)
extension UIKit.UITextInput {
  @_Concurrency.MainActor(unsafe) public var allText: Swift.String {
    get
    set(newText)
  }
  @_Concurrency.MainActor(unsafe) public var caretPosition: Swift.Int {
    get
    set(newPosition)
  }
  @_Concurrency.MainActor(unsafe) public var allTextRange: UIKit.UITextRange? {
    get
  }
}
public struct TokenResponseBody : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class Compiler {
  public enum CompilerError : Swift.Error {
    case wrongFormat
    public static func == (a: EpaySDK.Compiler.CompilerError, b: EpaySDK.Compiler.CompilerError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @objc deinit
}
open class PaymentModel {
  public init(authConfig: EpaySDK.AuthConfig, invoice: EpaySDK.Invoice, homeBankInstalled: Swift.Bool = false)
  public func requestToken(completion: @escaping (Swift.Bool) -> ())
  public func loadPublicProfile(completion: @escaping (Swift.Bool) -> ())
  public func loadLogoImage(completion: @escaping () -> ())
  public func makePayment(completion: @escaping (Swift.Bool) -> ())
  public func makePaymentWithApplePay(completion: @escaping (Swift.Bool) -> ())
  @objc deinit
}
extension Foundation.CharacterSet {
  public func isMember(character: Swift.Character) -> Swift.Bool
}
public struct CardInfo {
  public init(cardCred: Swift.String, cardNumber: Swift.String, payerName: Swift.String)
}
extension EpaySDK.CardInfo {
  public var maskedCardNumber: Swift.String {
    get
  }
}
public struct Country {
  public let name: Swift.String
  public let nameNative: Swift.String?
  public let emoji: Swift.String
  public let iso3166alpha2: Swift.String
  public let iso3166alpha3: Swift.String
  public let countryCode: Swift.String
  public let primaryFormat: Swift.String
  public let affineFormats: [Swift.String]
  public let phoneRegex: Swift.String
  public init(name: Swift.String, nameNative: Swift.String?, emoji: Swift.String, iso3166alpha2: Swift.String, iso3166alpha3: Swift.String, countryCode: Swift.String, primaryFormat: Swift.String, affineFormats: [Swift.String], phoneRegex: Swift.String)
  public func phoneStartsWith(digits: Swift.String) -> Swift.Bool
  public static func findCountries(amongCountries customCountries: [EpaySDK.Country]?, withTerms includingTerms: [Swift.String]?, excluding excludingTerms: [Swift.String]?, phone: Swift.String) -> [EpaySDK.Country]
  public static let all: [EpaySDK.Country]
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class PhoneInputListener : EpaySDK.MaskedTextInputListener {
  @_Concurrency.MainActor(unsafe) open var computedCountry: EpaySDK.Country? {
    get
  }
  @_Concurrency.MainActor(unsafe) open var computedCountries: [EpaySDK.Country] {
    get
  }
  @_Concurrency.MainActor(unsafe) open var enableCountries: [Swift.String]?
  @_Concurrency.MainActor(unsafe) open var disableCountries: [Swift.String]?
  @_Concurrency.MainActor(unsafe) open var customCountries: [EpaySDK.Country]?
  override open func pickMask(forText text: EpaySDK.CaretString) -> EpaySDK.Mask
  override public init(primaryFormat: Swift.String = super, autocomplete: Swift.Bool = super, autocompleteOnFocus: Swift.Bool = super, autoskip: Swift.Bool = super, rightToLeft: Swift.Bool = super, affineFormats: [Swift.String] = super, affinityCalculationStrategy: EpaySDK.AffinityCalculationStrategy = super, customNotations: [EpaySDK.Notation] = super, onMaskedTextChangedCallback: ((_ textInput: any UIKit.UITextInput, _ value: Swift.String, _ complete: Swift.Bool, _ tailPlaceholder: Swift.String) -> ())? = nil, allowSuggestions: Swift.Bool = super)
  @objc override dynamic public init()
  @objc deinit
}
extension EpaySDK.EnvironmentType : Swift.Equatable {}
extension EpaySDK.EnvironmentType : Swift.Hashable {}
extension EpaySDK.AffinityCalculationStrategy : Swift.Equatable {}
extension EpaySDK.AffinityCalculationStrategy : Swift.Hashable {}
extension EpaySDK.AutoPaymentFrequency : Swift.Equatable {}
extension EpaySDK.AutoPaymentFrequency : Swift.Hashable {}
extension EpaySDK.AutoPaymentFrequency : Swift.RawRepresentable {}
extension EpaySDK.KeyboardEventType : Swift.Equatable {}
extension EpaySDK.KeyboardEventType : Swift.Hashable {}
extension EpaySDK.KeyboardState : Swift.Equatable {}
extension EpaySDK.KeyboardState : Swift.Hashable {}
extension EpaySDK.TransferType : Swift.Equatable {}
extension EpaySDK.TransferType : Swift.Hashable {}
extension EpaySDK.TransferType : Swift.RawRepresentable {}
extension EpaySDK.Compiler.CompilerError : Swift.Equatable {}
extension EpaySDK.Compiler.CompilerError : Swift.Hashable {}
