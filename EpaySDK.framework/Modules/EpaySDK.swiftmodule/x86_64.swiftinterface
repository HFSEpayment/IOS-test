// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.1 (swiftlang-1300.0.31.4 clang-1300.0.29.6)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name EpaySDK
import AVFoundation
import AVKit
import Accelerate
import AudioToolbox
import CoreGraphics
import CoreMedia
import CoreVideo
@_exported import EpaySDK
import Foundation
import MobileCoreServices
import OpenGLES
import PassKit
import QuartzCore
import Security
import Swift
import UIKit
import WebKit
import _Concurrency
public enum EnvironmentType {
  case prod
  case preProd
  case dev
  public static func == (a: EpaySDK.EnvironmentType, b: EpaySDK.EnvironmentType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct ErrorResponseBody {
}
public struct PaymentResponseBody : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct AuthConfig {
  public var merchantId: Swift.String
  public var merchantName: Swift.String
  public var clientId: Swift.String
  public var clientSecret: Swift.String
  public init(merchantId: Swift.String, merchantName: Swift.String, clientId: Swift.String, clientSecret: Swift.String)
}
extension Foundation.URLRequest {
  public var curlString: Swift.String {
    get
  }
}
public enum IconType : Swift.Int {
  case font
  case image
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SkyFloatingLabelTextFieldWithIcon : EpaySDK.SkyFloatingLabelTextField {
  @_Concurrency.MainActor(unsafe) open var iconType: EpaySDK.IconType {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var iconImageView: UIKit.UIImageView!
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic open var iconImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic open var templateImage: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var iconLabel: UIKit.UILabel!
  @objc @_Concurrency.MainActor(unsafe) dynamic open var iconFont: UIKit.UIFont? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var iconText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic open var iconColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic open var selectedIconColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic open var iconWidth: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic open var iconMarginLeft: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic open var iconMarginBottom: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var iconRotationDegrees: Swift.Double {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) convenience public init(frame: CoreGraphics.CGRect, iconType: EpaySDK.IconType)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) override open func updateColors()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func textRect(forBounds bounds: CoreGraphics.CGRect) -> CoreGraphics.CGRect
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func editingRect(forBounds bounds: CoreGraphics.CGRect) -> CoreGraphics.CGRect
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func placeholderRect(forBounds bounds: CoreGraphics.CGRect) -> CoreGraphics.CGRect
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc deinit
}
public struct Invoice {
  public init(id: Swift.String, amount: Swift.Double, currency: Swift.String, accountId: Swift.String, description: Swift.String, postLink: Swift.String, failurePostLink: Swift.String, isRecurrent: Swift.Bool, autoPaymentFrequency: EpaySDK.AutoPaymentFrequency)
}
public enum AutoPaymentFrequency : Swift.String {
  case weekly
  case monthly
  case quarterly
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension Swift.String {
  public func separate(by: Swift.String) -> Swift.String
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class SkyFloatingLabelTextField : UIKit.UITextField {
  @objc @_Concurrency.MainActor(unsafe) open var isLTRLanguage: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open var titleFadeInDuration: Swift.Double
  @objc @_Concurrency.MainActor(unsafe) dynamic open var titleFadeOutDuration: Swift.Double
  @IBInspectable @_Concurrency.MainActor(unsafe) @objc override dynamic open var textColor: UIKit.UIColor? {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic open var placeholderColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open var placeholderFont: UIKit.UIFont? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open var titleFont: UIKit.UIFont {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic open var titleColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic open var lineColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic open var errorColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic open var lineErrorColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic open var textErrorColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic open var titleErrorColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic open var disabledColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic open var selectedTitleColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic open var selectedLineColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic open var lineHeight: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic open var selectedLineHeight: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var lineView: UIKit.UIView!
  @_Concurrency.MainActor(unsafe) open var titleLabel: UIKit.UILabel!
  @_Concurrency.MainActor(unsafe) open var titleFormatter: (_ text: Swift.String) -> Swift.String
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isSecureTextEntry: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var errorMessage: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isHighlighted: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) open var editingOrSelected: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) open var hasErrorMessage: Swift.Bool {
    get
  }
  @IBInspectable @_Concurrency.MainActor(unsafe) @objc override dynamic open var text: Swift.String? {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @IBInspectable @_Concurrency.MainActor(unsafe) @objc override dynamic open var placeholder: Swift.String? {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var selectedTitle: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var title: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isSelected: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) open func editingChanged()
  @discardableResult
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func becomeFirstResponder() -> Swift.Bool
  @discardableResult
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func resignFirstResponder() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isEnabled: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
    @_Concurrency.MainActor(unsafe) @objc set
  }
  @_Concurrency.MainActor(unsafe) open func updateColors()
  @_Concurrency.MainActor(unsafe) open func setTitleVisible(_ titleVisible: Swift.Bool, animated: Swift.Bool = false, animationCompletion: ((_ completed: Swift.Bool) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) open func isTitleVisible() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func textRect(forBounds bounds: CoreGraphics.CGRect) -> CoreGraphics.CGRect
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func editingRect(forBounds bounds: CoreGraphics.CGRect) -> CoreGraphics.CGRect
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func placeholderRect(forBounds bounds: CoreGraphics.CGRect) -> CoreGraphics.CGRect
  @_Concurrency.MainActor(unsafe) open func titleLabelRectForBounds(_ bounds: CoreGraphics.CGRect, editing: Swift.Bool) -> CoreGraphics.CGRect
  @_Concurrency.MainActor(unsafe) open func lineViewRectForBounds(_ bounds: CoreGraphics.CGRect, editing: Swift.Bool) -> CoreGraphics.CGRect
  @_Concurrency.MainActor(unsafe) open func titleHeight() -> CoreGraphics.CGFloat
  @_Concurrency.MainActor(unsafe) open func textHeight() -> CoreGraphics.CGFloat
  @objc override dynamic open func prepareForInterfaceBuilder()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @objc deinit
}
public enum KeyboardEventType : Swift.CaseIterable {
  case willShow
  case didShow
  case willHide
  case didHide
  case willChangeFrame
  case didChangeFrame
  public var notificationName: Foundation.NSNotification.Name {
    get
  }
  public static func == (a: EpaySDK.KeyboardEventType, b: EpaySDK.KeyboardEventType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [EpaySDK.KeyboardEventType]
  public static var allCases: [EpaySDK.KeyboardEventType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct KeyboardEvent {
  public let type: EpaySDK.KeyboardEventType
  public let keyboardFrameBegin: CoreGraphics.CGRect
  public let keyboardFrameEnd: CoreGraphics.CGRect
  public let curve: UIKit.UIView.AnimationCurve
  public let duration: Foundation.TimeInterval
  public var isLocal: Swift.Bool?
  public var options: UIKit.UIView.AnimationOptions {
    get
  }
}
public enum KeyboardState {
  case initial
  case showing
  case shown
  case hiding
  case hidden
  case changing
  public static func == (a: EpaySDK.KeyboardState, b: EpaySDK.KeyboardState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public typealias KeyboardEventClosure = ((_ event: EpaySDK.KeyboardEvent) -> Swift.Void)
open class KeyboardObserver {
  open var state: EpaySDK.KeyboardState
  open var isEnabled: Swift.Bool
  @objc deinit
  public init()
  open func observe(_ event: @escaping EpaySDK.KeyboardEventClosure)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class LaunchScreenViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public init(paymentModel: EpaySDK.PaymentModel)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) public func setEnvironmetType(type: EpaySDK.EnvironmentType)
  @objc deinit
}
public struct PaymentResult {
  public var isSuccessful: Swift.Bool
  public var paymentReference: Swift.String?
  public var cardID: Swift.String?
  public var errorCode: Swift.Int?
  public var errorMessage: Swift.String?
}
public struct TokenResponseBody : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
open class PaymentModel {
  public init(authConfig: EpaySDK.AuthConfig, invoice: EpaySDK.Invoice, homeBankInstalled: Swift.Bool = false)
  public func requestToken(completion: @escaping (Swift.Bool) -> ())
  public func makePayment(completion: @escaping (Swift.Bool) -> ())
  @objc deinit
}
extension EpaySDK.EnvironmentType : Swift.Equatable {}
extension EpaySDK.EnvironmentType : Swift.Hashable {}
extension EpaySDK.IconType : Swift.Equatable {}
extension EpaySDK.IconType : Swift.Hashable {}
extension EpaySDK.IconType : Swift.RawRepresentable {}
extension EpaySDK.AutoPaymentFrequency : Swift.Equatable {}
extension EpaySDK.AutoPaymentFrequency : Swift.Hashable {}
extension EpaySDK.AutoPaymentFrequency : Swift.RawRepresentable {}
extension EpaySDK.KeyboardEventType : Swift.Equatable {}
extension EpaySDK.KeyboardEventType : Swift.Hashable {}
extension EpaySDK.KeyboardState : Swift.Equatable {}
extension EpaySDK.KeyboardState : Swift.Hashable {}
